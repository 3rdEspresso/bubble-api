type Query {
  # USER
  userById(id: ID!): User
  deviceById(id: ID!): Device
  refreshToken: AuthResponse
  loginViaNfcCardAndDeviceId(nfcCardId: String!, deviceId: String!): AuthResponse
  loginViaSecondaryDeviceCode(code: String!): AuthResponse

  # ROOM
  rooms: [Room]
}

type Mutation {
  # USER
  createUserWithDevice(user: UserInput!, device: DeviceInput!): AuthResponse
  sendOTP(deviceId: String!): Boolean
  verifyOTP(deviceId: String!, otp: String!): AuthResponse
  registerNFCCard(nfcCardId: String!): User
  generateCodeForSecondaryDeviceLogin: LoginCodeResponse

  # ROOM
  createRoom(room: RoomInput!, participantIds: [ID]): Room
}

input UserInput {
  name: String!
  avatar: String
  username: String!
}

input DeviceInput {
  id: String!
  name: String!
  type: String!
  os: OS!
}

input RoomInput {
  name: String
  type: RoomType!
}

type AuthResponse {
  user: User!
  token: String!
}

type LoginCodeResponse {
  code: String!
}

type User {
  id: ID
  name: String!
  username: String!
  avatar: String
  nfcCardId: String
  primaryDevice: Device
}

type Device {
  id: ID
  name: String!
  type: String!
  os: OS!
}

type Room {
  id: ID
  name: String
  type: RoomType!
  createdBy: User!
  participants: [User]
}

enum OS {
  IOS
  ANDROID
}

enum RoomType {
  DM
  GROUP
}